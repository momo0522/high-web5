name: Build and Push Docker Image main branch

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  update-docker-image-push-to-hub:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    # set up java
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # set up .env file
    - name: Create .env
      run: |
        touch ./.env
        echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> ./.env
        echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> ./.env

    # set up application file
    - name: Create application.properties
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        echo "${{ secrets.APPLICATION }}" >> ./application.properties
        
      # set up mysql
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3306
        container port: 3306
        mysql database: 'webdb'
        mysql user: 'highweb'
        mysql password: 'highweb'
        
    # gradle grant execution permission and build project
    - name: Setup Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build

    # login dockerhub
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # build Docker image
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .

    # push docker image
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
  # run docker image
  deploy:
    runs-on: ubuntu-latest
    needs: update-docker-image-push-to-hub

    steps:
    - name: Deploy Docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          sudo docker stop ${{ secrets.DOCKER_IMAGE }} 2>/dev/null || true
          sudo docker rm ${{ secrets.DOCKER_IMAGE }}
          sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
          sudo docker compose up -d
          sudo docker system prune -f
